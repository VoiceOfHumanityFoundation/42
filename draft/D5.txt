Disclaimer: This document is just a collection of ideas on the possible approach for the technical implementation of a democratic system and is not intended to be an appell to overthrow an real existing government.
If there is an issues in this document which might be in contradiction to that intention the feedback for improvement will be appreciated and this document will be updated as soon as possible. 

"D5" might stand for Digital Decentral Diverse Direct Democracy:

A lot of current govermental functions might require still analog bureaucracy, which might decrease the speed of processing and might waste valuable resources. 
A logical conclusion might be to provide a internat based service, which might digitally accessible through any browser.

To minimize the risk of corruption by data manipulation and monopolization, data might be stored on verifiable decentralized web services.

Diversity might be difficult to measure and thus to represent, especially for those who might be less priviledged.
By giving access to those who might be able to have a vote in favor of such a system, one might seek be able to productively contribute.

Direct democracy might be generally difficult to implement, one reason might be because it might require enourmous resources to process all information by all citizens. If such a system would be moderated by agentic software and other citizens and not only by those who are employed by a governmental bureaucracy there might be enough processing power to let all citizens contribute directly to the final decisions, thus reducing the possiblity of abuse of power by corrupt representatives. To be compatible with as many of the current representation based democractic political systems, the announcement of the decisions made by the D5 system might be done by elected volunteers, saying that if D5 has been elected as the absolute majority one day, that the draft for changes which has been announced, will be applied as announced.

Democracy by citizens subject to such a government might be necessary to avoid fatal errors unavoidably existing in a fully automated system.

__________
The D5 might require the following to operate:
1. Users/Citizens with access to the system.
1.1 Creative and knowledgable citizens, who might come up with a suggestion for a solution to a problem and might do research whether that suggestion might be actually viable and might discuss it with other citizens in a thread of a forum application.
1.2 Fast and decisive citizens: Their role might be to understand the proposed solutions, comparing them and deciding as fast as possible which might be the one with the most chance or least damage.

2. Operating Personell:
2.1. Administrators, who might maintain the infrastructure of such a system. The core system might be open source, so anyone might be able to review the system and improve it. There might need to be enough administrators, who might be able to be paid eventhough volunteering is desirable, so errors might be able to be fixed as soon as possible and the webservice is constantly kept online. Only through the course of operation might be able to tell how many administrators might be required, but at least 6 with an 8 hour shift to guarantee 24/7 coverage and and a 7th administrator for any eventualities.
2.2. Operators to verify users and other operators.
2.3. Moderators: Moderating the discussions channels
2.4. Verifiers: Verifying new knowledge entries
2.5. Coordinators: Who coordinates shifts and other organizational tasks

3. Technical infrastructure
3.1. Source code
3.2. Servers (will be explained later)
3.3. Client devices (any device with access to internet and sufficient computation power)
3.4. Physical location (to send/receive letters, technical support, residence/bureau for personell, etc)

4. Voice Of Huaminty Foundation funding the administrators, operators, moderators, coordinators and the necessary technical infrastructure.

5. Local political party with representatives, who might have been authorized to access such a D5 system. So if a decision has been made, to announce it as soon as possible in the local legislative organization.
________

Workflow for a decision:
1) A citizen might start a thread for a topic describing a specific problem.
2) Other citizens subscribed to a topic, might get notified about that thread.
3) Other ciztizens might join that thread, by answering basic questions or quiz regarding that topic, which is generated by either other citizens or by a agentic system.
4) In the thread one or many solutions might be elaborated.
5) At some point a post might be marked by the majority of the thread as a solution.
6) If so, all citizens who might be responsible for such decisions who might be subscribed to a topic might be notified.
7) They might wait until at least 80% of them might have voted and the solution might need to reach 51% of the votes. Until then, the participants might be able to vote.
8) The result of the vote might be published to a public log.
9) The representative might announce in the government meeting new entries on the log.
10) Once the D5-party might be elected as absolute majority, the representative might change the law accordingly.

________

Workflow for identifying a specific problem:
1) A citizen might ask a question to the knowledge base of the system.
2) The system might try to give an answer using agentic systems, searching in other threads.
3) If the agentic system might not be able to find an viable answer or if the citizen might not be satisfied with an answer, a thread with a topic might be able to be started.
________

Failsafe mechanisms:
- Human representative, who might have received a long term psychological assessment of aptitude.
- That human representative might request a predefined volunteer of a channel as expert to be present at congress.
- Decentralization of the system through a peer-to-peer consensus mechanism.
- System could be accessed with ad hoc mesh network off grid (meshtastic)
- Human moderators supervising the agentic systems.
- Corrupt representative might be able to be deelected by the authorized ballot participants swiftly.
- Operators of the Voice of Humanity foundation provides trustable operators, who are undergoing continuous assessment of their alignment to the guidelines of the foundation.
- The Voice of Humanity foundation might be able to fund sufficiently trustable operators.

________

Current tech stack:
1. Client-Application:
	- Internet connection with a gateway node providing access to read and request to publish a message.
	- The gateway node instance might be able to be either selected by the user from the official list hosted on the voice of humanity foundation website or self hosted.
	- Self Compilable
	- Request a UUID and public encrpytion key automatically.
	- Might send an encrpyted message with the public key of the authentication node for privacy.
	- If the publish request might have been denied by the authorization node, the user might get two information. One might contain plain text explaining the reason in an human understandable way. The other might contain an encrpyted message containing the original message, UUID of the client application, the UUID of the gateway node, the UUID of the authentication node and the reason why the publish request might have been denied.
	- The user might have the freedom to send the encrpyted string to the Voice of Humanity foundation for review by human after the verification with altcha. Only messages which might be decrypted by the authorization node might be actually sent for human review.
	- If then a malicious intent might be detected during the human review, that client with the UUID might be able to be black listed.
	- A client might be able to request permission to vote, after the identitiy of the client might have been verified using the API for online identification of local governments.

2. Gateway Node:
	- Self Compilable, UUID of the gateway node might be registered in authorization node
	- Might host a REST API to access to the decentralized data and request to publish messages.
	- Might relay encrpyted publish message request to the authorization node. 
	- Might be able to be requested for black listing, if many malicious clients activity might have been detected.

3. Authorization node.
	- Might be able to authenticate and blacklist a Gateway node.
	- Might be a encrypted docker image, and only that image might have access to the decentralized key management system.
	- Might regularly automatically recompile itself from the most recent commit to radicle repo.
	- All activity might require authorization by the decentral secret management system.
	- Might have a local RAG pipeline with a knowledge base and guard rail system to verify that a new message might not be spam.
	- If the message might be verified, it might update the data of the forum/knowledge base.
	- Might provide API to accept pull requests for the source code on redicle repo might be authorized by the maintenance team.
	- A request to black list a authorization node might be sent to the decentral secret management system by the maintainer of an authorization node.
	- After the request for black listing might have been issued, all activities by that node might be suspended until the request might have been processed.
	- After sending one request to black list that original authentication node might also be suspended to prevent one node accusing all others.

4. Decentral secret management system:
	- It might be a dApp at first instantiated and might be funded by the voice of humanity foundation and might act as a single instance.
	- It's purpose might be to keep regenerating the credendencials in certain intervals to avoid being brute forced.
	- The credencials might be encrpyted in a file on a virtual disk on a RAM and might not be stored anywhere else to avoid being brute forced.
	- List of credentials to be stored:
		- All public keys, UUIDs of the client applicaiton, and whether it might be blocked, and whether it might have permissions to vote.
		- All public keys and UUIDs of the gateway node, and whether it might be blocked
		- All public keys and UUIDs of the authorization node, and whether it might be blocked
		- The private key private key used to encrypt the file with the credencials might be also on the temporal ram on a RAM of the decentral private computing cluster and might be also regulary regenerated.
		- The root password, after the first instantiation, the system might lock out the access to the root system by changing the root password to a random password. And the system might keep changing the root password as well to avoid "evil maid attacks".
	- Might manage votes regarding black listing of authentication nodes.

5. Publically accessible decentral storage for the forum data for discussion, it's operation might be funded by the voice of humanity foundation. The current laws of each country might be mirrored and anyone might be able to publish a comment or specific change for that law but only might be authenticated with the digital identity issued by that local government of that country might be able to participate in the vote to accept that change.
________
Old tech stack:
1. Client-Device:
	- Internet connection with a centralized REST server might provide access to read only access to channels.
	- The instance of the centralizes REST server might be able to be chosen by the user from the official list hosted on the Voice of Humanity foundation.
	- Optional features because it might require enough computing power for verification of data integregity. If hosted, it might be able to work as a gateway with write access, usually exceeding the capabilities of commonly affordable smartphone:
		- Which might be hosting a minimal unauthorized node decentral communication Protocol with write access to channels.
		- Which might be hosting a minimal authorized node for decentral communication Protocol with write access to ballots.

2. Server:
2.1 P2P authorized node as bootstrapping nodes which might be forked custom instance of radicle and might be forked as an custom instance of verizexe (Multiple independent instances desireable)
2.2 P2P authorized node with radicle like decentral repo which might be hosting source code and also the public data (discussion channels, ballot results, knwoledge base) and private data (Blacklist, each ballot votes) with write access.
2.3 P2P unauthorized node with radicle like decentral repo which might be hosting source code and also the public data (discussion channels, ballot results) and private data (Blacklist, each ballot votes) with only read access.
2.4 P2P authorized node with read only access to public data which might be interfacing a centralized REST server for quick information access.
2.5 P2P authorized node with code review bot, which might be verifying request for change and initiating a ballot of the code maintainance team.
2.6 P2P authorized node with moderator bots which might be responsible for blacklisting nodes for each channels if a malitious intent might have been recognized, before blacklisting human moderator might need to review that malitious action.
2.7 P2P authorized node for quiz generator, which might be submitting quiz to human verifiers.
2.8 P2P authorized node for authorization (of users, operators, domains to centralized server as information source).
2.9 P2P authorized node for managing "main" cryptowallet managing all the Filecoin/Verizexe-coin which address might be hard coded and the private key is typed in manually by the highest administrator.
________
MISC:
- Example for online identification API which might be provided by government for voting called "eID" in Germany: https://www.personalausweisportal.de/Webs/PA/DE/wirtschaft/diensteanbieter-werden/einsatzmoeglichkeiten/einsatzmoeglichkeiten-node.html
- Knowledge Base: Knowledge might be mainted as unstructured text from which a Neo4j with GPU acceleration which might be generated for a RAG pipeline.
- decentralized webhosting:
	- Decentral Open source code base: https://radicle.xyz/
	- Decentral private computing:
		- Protocol + Computing power: https://github.com/aleph-im/aleph-vm/tree/main/runtimes/aleph-debian-12-python
		- Protocol: https://github.com/EspressoSystems/veri-zexe
	- Decentral Storage for encrypted Docker images: https://ipfs.tech/
	- Etherum Smart Contract for most important information, which might need to be crowd-funded.


Outdated reserach notes:
	- Decentral webhosting: https://ipfs.tech/
	- Decentral Database:  "proof of spacetime" -> With dedication, it might be able to be overrun.
		- https://spec.filecoin.io/
		- https://docs.filecoin.io/builder-cookbook/dapps/decentralized-database
	- Decentral forum: https://join-lemmy.org/docs/introduction.html

____________
Which might be known yet might be unsolved problems:
- Verification process of the knowledge base/quiz
	- Writing history through corrupt historians problem.
	- Only an expert human might be able to verify, but it might mean that it might be a bottleneck.
	- And discussing it in public channels might mean that it will leak the information.
	- And discussing it in private channels might be against transparency.
- Cheating during knowledge tests:
	- If the user might be cheating during tests (or malicious bot), then that user might have sufficient knowledge to stay in the thread and propergate false information. Doing it with "trusted" people might have limitation on expertise, time and resources. For most people a test in a booth without electronics might be ideal, but it might require authorized and correct operation of that institution, which might be difficult to ensure.
- Integration of quantum cryptography might require special hardware, which might not be available for consumers soon enough. Even if it might become available, it might be too expensive to obtain or to maintain.
__________
Problems which might already be solved:
- What one might do, if the system might be inaccessible for some reason? (Coup d'etat problem) -> Decentralation (Offline First Principle)
- Organized Radicalist group with bad intentions might create a fake majority (Radicalist problem) -> Black list 
- Black List Problem: Ethical, Practical -> If someone might not pass the test, there might be a ballot from that channel whether to actually black list that instance,
where the users might be able to see the answer to the question.
- Prioritization of Nodes Problem if filecoin might be used, the each nodes might need to donate the filecoin back to the account of the "main" node or so called "bootstrap" node,
which address might be documented in the etherum smart contract. -> Filecoin might not be used, but "verizexe"
- Fake accounts problem (Verification of nodes might be done by main node of local government)
- No need for Load Balancing if the P2P instances might be truely p2p (verizexe using off chaing computation)
- Currently there might be decentrally managed domains (e.g. .onion), but there might be a need for single point of entry. ("decentral domains" for wallet might not be it) -> p2p nodes might offer API to interact with federated frontend servers for ease of access
- Verification of code integrity of nodes:
	1. Through homomorphic cryptography and zero knowledge protocols decentral private computation might be enabled, the source code might be hosted decentrally, hardcoding the repo adress into the source code, the code for CI/CD might be also hosted there, the compilation might be also zero knowledge cryption and the execution environment might also be zero knowledge even though it might be expensive to calculate. It might probably be based on nexus-zkvm.
	 Incorporating radicle-repos into zkvm uncorruptable repo
	2. The procedure for RFC (Request for Change) might be unchangable
	3. Everyone who might manage to remain in the code maintenance team for at least a year might be able to submit a pull request for code review by an bot.
	4. The code review might check that the changes might not be violating against the procedures for RFC or changes to it.
	5. If the code review bot might have checked it, there might be a vote by the code maintenance team to accept that RFC to the code base, which might trigger a CI/CD workflow.
	6. Hosting bot instances might be optional (Code review, moderator, quiz generator, explainer)
- Bot war Problm (Moderator Bot might not work as expected and goes rogue) -> Different bot might be in charge of code review.
- Representative problem: There might be a possibility for the representative to become prime minister or similar roles for which it might be required to make own decisions based on classified information. Therefore that representative might need to decline such roles. Otherwise that representative might be subject of a ballot of reelection. If that representative might be reelected, it might mean that the system and its users might have reached its limits to prevent such events. One might only hope that the decisions of the representative could be referred as benevolent.
- How local polls might be able to be handled? -> It might be done outside of the system and thus irrelevant for the system. The polls made within this system might be just for making suggestions to the local council and reelecting representatives for that local council if there might be enough supporters to found a local politcal party.
- Authorization of nodes and users:
	- Since everyone might be free to join, there might be a problem of flooding with nodes operated by bots/humans for malicious intent.
	- One solution approach might be authorization for instanciation
	- Every ballot instance might need to be authorized
		- 1. Every operator from the identity verification service might require access to the system for the purpose of authorization.
		- 2. Every operator might be verified by trusted operators of the Voice of Humanity foundation and the validity might need to be updated at least annualy.
		- 3. A citizen of a specific country from the local legal age for voting might request a verification through the system.
			- There might be a simple quiz about the system to verify that they understand what they might be applying for.
			- Then they might be typing in all the nessary infomation (Name, Email).
			- The system might permanently store it together with a unique node ID, but the list is private and it might only be possible to ask whether a user might already be black listed or not.
		- 4. They might receive an email containing a link and a one time key to the specified address which might start a identity verification process with authorized third party operators.
		- 5. The user might authorized if the operator might type it into the system. 
		- 6. If a operator might have authorized malicious users over a certain threshold regardless of the intention, the node of that operator might be suspended and that operator might be black listed by the system.
		- 7. All users authorized by the corrupt operator might be temporalily be excluded from ballots until reverification.
		- 8. If that reverification might not happen in time, that user might be permanently blacklisted.
- Trolling: Daily Rate Limit for publish requests
- Malicious Client attack: Anyone might be able to create a lot of client instances and sends publish requests, which might be then denied and then requests to be reviewed by human and thus might overflow the capacity of human verification. Solution: Proof of Work with Altcha: https://github.com/altcha-org/altcha
_____________
Notes on implementation of the bots:
1. Code review bot


2. Moderator bot:
2.1 Principles of the moderator bot:
  - If moderator bot might remove a comment, that might have removed a comment might need to be:
	- publically avaiable
	- the author might be able to request it to be reviewed by a member of the channel if falsely removed
  - A comment might need to:
	- refer to a verified knowledge base entry
	- comply to the publication policy
2.2 Publication Policy:
- One might seek to be kind, to speak truthfully, to say useful things which might be necessary.
- If one might recognizse malitious action, one might seek to report that action proactively to the moderators. 


3. Explainer bot

4. Quiz generator bot might ask such a question:   
"How might everyone be on the way to Pro?"


